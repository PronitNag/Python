# Python Decorators - क्या, क्यों, कहां, कब और कैसे

## क्या हैं Decorators? (What are Decorators?)

Python में decorators एक special type के functions होते हैं जो दूसरे functions को modify करते हैं। यह एक तरह का "wrapper" होता है जो किसी existing function को नई functionality देता है बिना उसके original code को change किए। Simple words में, decorator एक function है जो दूसरे function को input के रूप में लेता है और उसे enhanced functionality के साथ return करता है।

Decorators को special symbol `@` (at sign) से पहचाना जाता है।

## क्यों Use करें Decorators? (Why use Decorators?)

1. **Code Reusability** - एक ही functionality को बार-बार लिखने की बजाय, आप एक decorator बना सकते हैं और उसे कई functions पर use कर सकते हैं
2. **Clean and Maintainable Code** - decorators आपके code को छोटा और साफ रखने में help करते हैं
3. **Separation of Concerns** - वे main logic और cross-cutting concerns (जैसे logging, authentication, etc.) को अलग रखने में मदद करते हैं
4. **Extended Functionality** - existing functions में नई features add करना बिना original code को छेड़े

## कहां Use होते हैं Decorators? (Where are Decorators used?)

1. **Web Frameworks** - Django, Flask जैसे frameworks में `@login_required`, `@require_POST` जैसे decorators common हैं
2. **Authentication & Authorization** - user access control के लिए
3. **Logging and Debugging** - function calls को track करने के लिए
4. **Caching** - results को cache करने के लिए
5. **Timing/Profiling** - function execution time को measure करने के लिए
6. **Input Validation** - parameters को validate करने के लिए

## कब Use करें Decorators? (When to use Decorators?)

आप decorators तब use करें जब:

1. आप किसी function के behavior को modify करना चाहते हैं बिना उसके implementation को change किए
2. एक जैसी functionality को multiple functions पर apply करना चाहते हैं
3. Cross-cutting concerns को implement करना है (logging, validation, etc.)
4. Code को modular और maintainable रखना चाहते हैं

## कैसे Create करें Decorators? (How to create Decorators?)

### Basic Decorator Example:

```python
# Simple decorator function
def my_decorator(func):
    def wrapper():
        print("कुछ action पहले करें")
        func()  # Original function call
        print("कुछ action बाद में करें")
    return wrapper

# Decorator का use करें
@my_decorator
def say_hello():
    print("Hello!")

# Function को call करें
say_hello()
```

**Output:**
```
कुछ action पहले करें
Hello!
कुछ action बाद में करें
```

### Parameters के साथ Decorator:

```python
def repeat(times):
    def decorator(func):
        def wrapper(*args, **kwargs):
            result = None
            for _ in range(times):
                result = func(*args, **kwargs)
            return result
        return wrapper
    return decorator

@repeat(times=3)
def greet(name):
    print(f"Hello {name}!")

greet("Rahul")
```

**Output:**
```
Hello Rahul!
Hello Rahul!
Hello Rahul!
```

## Real World Examples

### Timing Decorator:

```python
import time

def measure_time(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print(f"{func.__name__} function में {end_time - start_time:.4f} seconds लगे")
        return result
    return wrapper

@measure_time
def calculate_something():
    # Some heavy calculation
    time.sleep(2)  # Simulate processing
    return "Calculation complete"

calculate_something()
```

### Django में Examples:

```python
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST

@login_required
@require_POST
def update_profile(request):
    # यहां function का code
    return HttpResponse("Profile updated!")
```

## निष्कर्ष (Conclusion)

Decorators Python programming का एक powerful feature हैं जो code को modular, readable और maintainable बनाता है। वे एक elegant way provide करते हैं cross-cutting concerns को handle करने के लिए और code duplication को reduce करते हैं। Python के ecosystem में, particularly web development और frameworks में, decorators आपको आसानी से advanced features implement करने में help करते हैं।
